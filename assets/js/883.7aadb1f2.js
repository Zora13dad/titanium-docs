(window.webpackJsonp=window.webpackJsonp||[]).push([[883],{2123:function(e,t,a){"use strict";a.r(t);var s=a(21),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"project-template-actions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#project-template-actions"}},[e._v("#")]),e._v(" Project Template Actions")]),e._v(" "),a("h2",{attrs:{id:"requirements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requirements"}},[e._v("#")]),e._v(" Requirements")]),e._v(" "),a("p",[e._v("The examples in this page use the "),a("strong",[a("em",[e._v("Prototype")])]),e._v(" library, which is included by default inside a portal. However, the same concepts may be applied using other implementations.")]),e._v(" "),a("h2",{attrs:{id:"invocation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#invocation"}},[e._v("#")]),e._v(" Invocation")]),e._v(" "),a("p",[e._v("This command is executed immediately in a synchronous way.")]),e._v(" "),a("h2",{attrs:{id:"get-project-template-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-project-template-types"}},[e._v("#")]),e._v(" Get Project Template Types")]),e._v(" "),a("p",[e._v("Gets the different types of project templates available, dispatch this call:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("dispatch($H({\n  controller: 'portal.project.templates',\n  action: 'getTemplateTypes'\n}).toJSON()).evalJSON();\n")])])]),a("p",[e._v("Returns:\nAn array of strings")]),e._v(" "),a("h2",{attrs:{id:"get-project-templates"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-project-templates"}},[e._v("#")]),e._v(" Get Project Templates")]),e._v(" "),a("p",[e._v("Gets the project templates that matches the project template types, dispatch this call:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("dispatch($H({\n  controller: 'portal.project.templates',\n  action: 'getTemplates',\n  args: '[\"WEB\",\"TITANIUM_MOBILE\"]'\n}).toJSON()).evalJSON();\n")])])]),a("p",[e._v("Arguments:\nList of project template types. If no arguments are specified, all project templates will be returned")]),e._v(" "),a("p",[e._v('Returns:\nAn array of Project Templates. Each template has the following attributes: "name", "id", "description", "type"')]),e._v(" "),a("h2",{attrs:{id:"listening-to-template-changes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#listening-to-template-changes"}},[e._v("#")]),e._v(" Listening to Template Changes")]),e._v(" "),a("p",[e._v("Some of the templates may be loaded or removed after the portal is opened. In this case, the Studio fires events that indicate a Template addition or removal.\nHere is a sample of a way you can listen to such events (based on the "),a("a",{attrs:{href:"https://github.com/aptana/studio3-sdk",target:"_blank",rel:"noopener noreferrer"}},[e._v("studio3-sdk"),a("OutboundLink")],1),e._v(" sample):")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("eventsDispatcher.addObserver('templates', function(e) { portal.templates.update(e); });\n")])])]),a("p",[e._v("The "),a("em",[e._v("update")]),e._v(" call receives an event object that holds the following information, and can be used to update the UI:")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("key")]),e._v(" "),a("th",[e._v("value")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("event")]),e._v(" "),a("td",[e._v("The event identifier (in this case, always 'templates')")])]),e._v(" "),a("tr",[a("td",[e._v("eventType")]),e._v(" "),a("td",[e._v("'added' or 'deleted'")])]),e._v(" "),a("tr",[a("td",[e._v("data")]),e._v(" "),a("td",[e._v("A JSON representation of the Template-Info (as described above)")])])])])])}),[],!1,null,null,null);t.default=r.exports}}]);