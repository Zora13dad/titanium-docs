(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{2946:function(t,e,a){"use strict";a.r(e);var r=a(21),n=Object(r.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"pydev-refactoring"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#pydev-refactoring"}},[t._v("#")]),t._v(" PyDev Refactoring")]),t._v(" "),r("p",[t._v("Well, let's see how refactoring works... and let's make it by example.")]),t._v(" "),r("p",[t._v("As our 'base', we will use the example below:")]),t._v(" "),r("p",[r("img",{attrs:{src:a(781),alt:"refactor_base"}})]),t._v(" "),r("p",[t._v("Features:")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("Keybinding: "),r("strong",[t._v("Alt+Shift+R")])])]),t._v(" "),r("li",[r("p",[t._v("Supports "),r("strong",[t._v("preview")])])]),t._v(" "),r("li",[r("p",[t._v("Integrated into the editor (but not in the package explorer, so, it can rename a module, but only through an import to that module)")])]),t._v(" "),r("li",[r("p",[t._v("Supports "),r("strong",[t._v("undo/redo")]),t._v(" in the workspace")])]),t._v(" "),r("li",[r("p",[t._v("Rename class")])]),t._v(" "),r("li",[r("p",[t._v("Rename method")])]),t._v(" "),r("li",[r("p",[t._v("Rename attribute")])]),t._v(" "),r("li",[r("p",[t._v("Rename imports")])]),t._v(" "),r("li",[r("p",[t._v("Rename local variable")])])]),t._v(" "),r("p",[t._v("Let's say we want to rename our 'newVar', and call it 'renamedVar'. To do that, mark it and press "),r("strong",[t._v("Alt+Shift+R")]),t._v(" and set the name to 'renamedVar'.")]),t._v(" "),r("p",[r("img",{attrs:{src:a(782),alt:"refactor_rename1"}}),t._v("\nThat would give us the following result:")]),t._v(" "),r("p",[r("img",{attrs:{src:a(783),alt:"refactor_rename2"}})]),t._v(" "),r("p",[r("strong",[t._v("Extracting a method")]),t._v(": Let's mark the '100+500' and press "),r("strong",[t._v("Alt+Shift+M")]),t._v(" (alternatively, you could use a context menu: press the right button and select: refactoring > Extract Method). And set the name of the new method to 'newMethod'.")]),t._v(" "),r("p",[r("img",{attrs:{src:a(784),alt:"refactor_extract_method1"}}),t._v("\nThat would give us the following result:")]),t._v(" "),r("p",[r("img",{attrs:{src:a(785),alt:"refactor_extract_method2"}})]),t._v(" "),r("p",[r("strong",[t._v("Inlining a variable")]),t._v(": Let's say that we are still not satisfied with that; we wouldn't like that 'var' variable, so we want to remove the reference to it and call the method directly. To do that, mark the 'var' and press "),r("strong",[t._v("Alt+Shift+I")]),t._v(".")]),t._v(" "),r("p",[r("img",{attrs:{src:a(786),alt:"refactor_inline1"}}),t._v("\nThat would give us the following result:")]),t._v(" "),r("p",[r("img",{attrs:{src:a(787),alt:"refactor_inline2"}})]),t._v(" "),r("p",[r("strong",[t._v("Extracting a variable")]),t._v(": Ok, it just wasn't what we wanted, so, let's make the opposite refactoring, let's extract a variable from the self.newMethod() call. Mark it and press "),r("strong",[t._v("Alt+Shift+L")]),t._v(" and set the name to 'newVar'.")]),t._v(" "),r("p",[r("img",{attrs:{src:a(788),alt:"refactor_extract_var1"}}),t._v("\nThat would give us the following result:")]),t._v(" "),r("p",[r("img",{attrs:{src:a(789),alt:"refactor_extract_var2"}}),t._v("\nAnd that's it for the refactoring... hope you enjoy it.")])])}),[],!1,null,null,null);e.default=n.exports},781:function(t,e,a){t.exports=a.p+"assets/img/refactor_base.72330b43.png"},782:function(t,e,a){t.exports=a.p+"assets/img/refactor_rename1.df63384d.png"},783:function(t,e,a){t.exports=a.p+"assets/img/refactor_rename2.f4bc1b6d.png"},784:function(t,e,a){t.exports=a.p+"assets/img/refactor_extract_method1.d6395cb6.png"},785:function(t,e,a){t.exports=a.p+"assets/img/refactor_extract_method2.6810b6b9.png"},786:function(t,e,a){t.exports=a.p+"assets/img/refactor_inline1.c4fdcec6.png"},787:function(t,e,a){t.exports=a.p+"assets/img/refactor_inline2.8d81b073.png"},788:function(t,e,a){t.exports=a.p+"assets/img/refactor_extract_var1.298445e0.png"},789:function(t,e,a){t.exports=a.p+"assets/img/refactor_extract_var2.70005d64.png"}}]);