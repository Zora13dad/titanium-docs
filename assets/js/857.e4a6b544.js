(window.webpackJsonp=window.webpackJsonp||[]).push([[857],{2097:function(e,t,n){"use strict";n.r(t);var a=n(21),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"trigger-on-save"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#trigger-on-save"}},[e._v("#")]),e._v(" Trigger on Save")]),e._v(" "),n("h2",{attrs:{id:"overview"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),n("p",[e._v("In this recipe, we show how a Ruble command can be triggered when an editor saves its content. This allows for processing to occur immediately after the file has been saved.")]),e._v(" "),n("h2",{attrs:{id:"the-code"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#the-code"}},[e._v("#")]),e._v(" The Code")]),e._v(" "),n("p",[e._v('In the snippet below, we register our command with the "execution listener". When that listener encounters an event with the "org.eclipse.ui.file.save" id, the command will be triggered. Inside the invocation block, we see that the context contains an "execution_listener" property, which is a hash of properties being sent with the event. All key/value pairs are emitted to the console. To perform your post-save processing, replace the CONSOLE.puts line with the appropriate code.')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('require \'ruble\'\n\nbundle do |bundle|\n  bundle.author = "Kevin Lindsey"\n  bundle.copyright = "Copyright 2001 Appcelerator, Inc. Distributed under the MIT license."\n  bundle.display_name = "Execute on Save"\n  bundle.description = "A simple bundle showing how to trigger a command when editors save their content"\nend\n\ncommand "Show Save Information" do |cmd|\n  cmd.input = :none\n  cmd.output = :discard\n  cmd.trigger = :execution_listener, "org.eclipse.ui.file.save"\n  cmd.invoke do |ctx|\n    ctx.execution_listener.each {|k,v| CONSOLE.puts "Execution: #{k}=#{v}"}\n  end\nend\n')])])]),n("div",{staticClass:"warning custom-block"},[n("p",{staticClass:"custom-block-title"},[e._v("⚠️ Warning")]),e._v(" "),n("p",[e._v('To get an idea of what events are available, remove the "org.eclipse.ui.file.save" argument from the trigger assignment. This will cause the command to trigger for all execution listener events.')])]),e._v(" "),n("h2",{attrs:{id:"an-example"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#an-example"}},[e._v("#")]),e._v(" An Example")]),e._v(" "),n("p",[e._v("A script that takes the current file and makes a backup in a specific spot.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('command "Backup Open Editor" do |cmd|\n  cmd.input = :document\n  cmd.output = :discard\n  cmd.trigger = :execution_listener, "org.eclipse.ui.file.save"\n  cmd.invoke do |ctx|\n    backup_path = "/Users/ingo/Desktop/"\n    source_path = ENV[\'TM_FILEPATH\']\n\n    # Strip name and extension to create a new backup file name.\n    # We use Unix milliseconds to provide the unique #\n    ext = File.extname(source_path)\n    filename = File.basename(source_path, ext)\n    destination_path =  backup_path + filename + "_" + Time.now.to_i.to_s + ext\n\n    # Copy the file name\n    CONSOLE.puts "Backing Up: " + source_path + " to " + destination_path\n    File.copy(source_path, destination_path)\n  end\nend\n')])])])])}),[],!1,null,null,null);t.default=i.exports}}]);