(window.webpackJsonp=window.webpackJsonp||[]).push([[363],{1505:function(e,t,a){"use strict";a.r(t);var n=a(21),i=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"modules-https"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#modules-https"}},[e._v("#")]),e._v(" Modules.Https")]),e._v(" "),a("TypeHeader"),e._v(" "),a("h2",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),a("p",{staticClass:"note"},[e._v("Note: This feature requires a Pro or Enterprise subscription. More infos "),a("a",{attrs:{href:"https://www.appcelerator.com/pricing/",target:"_blank"}},[e._v("here")]),e._v("!")]),e._v(" "),a("p",[e._v("Use the HTTPS module to create a Security Manager for "),a("code",[e._v("Titanium.Network.HTTPClient")]),e._v("\nthat authenticates a set of HTTPS servers by pinning an HTTPS server's URL to its\npublic key contained in the certificate.")]),e._v(" "),a("p",[e._v("The X.509 certificate files can have any name and extension you\nwish, but they must be in DER binary format.")]),e._v(" "),a("p",[e._v("The security manager will guarantee that all "),a("code",[e._v("HTTPClient")]),e._v(" connections to this URL\nare to a server that holds the private key corresponding to the public key embedded in the\ncertificate, therefore authenticating the server and preventing man-in-the-middle attacks.")]),e._v(" "),a("h3",{attrs:{id:"concepts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concepts"}},[e._v("#")]),e._v(" Concepts")]),e._v(" "),a("p",[e._v("Typically, HTTPS connections are authenticated using a chain of trust, where the identities of various\nintermediate certificate authorities (CA) are checked until a trusted root CA can be authenticated.")]),e._v(" "),a("p",[e._v("For example, an intermediate CA signs the HTTPS server's certificate used to check the identity\nof the HTTPS server you want to connect to.  However, the intermediate CA cannot be trusted\nuntil its identity is verified. The certificate of the intermediate CA must be checked to see if the\nCA is trusted. This process repeats until a root CA can be checked.\nOnce all identities have been validated, the application can establish\na secure connection to the HTTPS server.  This mechanism is known as a certificate chain.")]),e._v(" "),a("p",[e._v("This mechanism relies on trusting third parties to carefully check and validate other companies\nthat sign certificates.  If an untrustworthy CA issues a valid certificate to\nan attacker or an attacker gets a hold of a CA's private key, the attacker can insert\nthemselves into the certificate chain, then intercept and send data to the client.\nThis is known as a man-in-the-middle attack.")]),e._v(" "),a("p",[e._v("To prevent man-in-the-middle-attacks, the security manager,\ncreated by this module, ensures that the public key in the leaf certificate (or other certificate identified\nby the "),a("code",[e._v("trustChainIndex")]),e._v(" property) of the chain is the same as the public key in the certificate configured\nwith this URL. If the public keys match, the chain is passed onto the underlying OS to authenticate.\nIf they do not match, the connection is terminated.")]),e._v(" "),a("p",[e._v("Since we pass the chain to the underlying OS to validate, self-signed certificates will be rejected.\nNote that the "),a("code",[e._v("validatesSecureCertificate")]),e._v(" property of the "),a("code",[e._v("HTTPClient")]),e._v(" is not honored for pinned URL's.")]),e._v(" "),a("p",[e._v("For the Security Manager to participate in the connection, the initial URL must be configured.")]),e._v(" "),a("p",[e._v("If a connection redirects to a different host, then public key validation on the redirected URL will\nonly be performed if that URL is also configured in the Security Manager. If the redirected URL is\nnot configured, then the default OS authentication is triggered.")]),e._v(" "),a("h3",{attrs:{id:"getting-started"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getting-started"}},[e._v("#")]),e._v(" Getting Started")]),e._v(" "),a("p",[e._v("Once you have "),a("a",{attrs:{href:"#!/guide/Using_a_Module"}},[e._v("installed")]),e._v(" the module and added it as a depedency and\nuse "),a("code",[e._v("require()")]),e._v(" (ES5) or "),a("code",[e._v("import")]),e._v(" (ES6+) to access it from JavaScript:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("// ES5\nvar https = require('appcelerator.https');\n\n// ES6+\nimport 'https' from 'appcelerator.https';\n")])])]),a("p",[e._v("The "),a("code",[e._v("https")]),e._v(" variable is a reference to the module object.  Use this reference to call the\n"),a("code",[e._v("createX509CertificatePinningSecurityManager()")]),e._v(" method to authenticate the specified HTTPS URLs.\nPass in an array of dictionaries as the only required parameter to the method. Each\ndictionary in the array contains three keys (two of them required):")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("url")]),e._v(": URL of the server to contact. Can be a fixed URL or wildcard URL (if supported by the certificate)")]),e._v(" "),a("li",[a("code",[e._v("serverCertificate")]),e._v(": X.509 certificate in DER format to verify the server's identity")]),e._v(" "),a("li",[a("code",[e._v("trustChainIndex")]),e._v(": (Optional) index of the trust-chain certificate to validate against (default: 0 - leaf certificate).")])]),e._v(" "),a("p",[e._v("For example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("var securityManager = https.createX509CertificatePinningSecurityManager([\n    {\n        url: 'https://www.example.com',\n        serverCertificate: 'exampleServerCertificate.der',\n        trustChainIndex: 0\n    }\n]);\n")])])]),a("p",[e._v("After the security manager is created, create an "),a("code",[e._v("HTTPClient")]),e._v(" object and set the\n"),a("type-link",{attrs:{type:"Titanium.Network.HTTPClient.securityManager"}},[e._v("securityManager")]),e._v(" property to the security manager\nobject you just created.  You must set this property when creating the "),a("code",[e._v("HTTPClient")]),e._v(" instance.")],1),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("var httpClient = Ti.Network.createHTTPClient({\n    onload: function(e) {\n        Ti.API.info('Received text: ' + httpClient.responseText);\n    },\n    onerror: function(e) {\n        Ti.API.error(e.error);\n    },\n    timeout: 5000,\n    // You can only set this property when creating the HTTPClient\n    securityManager: securityManager\n});\n")])])]),a("p",[e._v("After the "),a("code",[e._v("securityManager")]),e._v(" property is set, call the "),a("code",[e._v("HTTPClient")]),e._v("'s "),a("code",[e._v("open()")]),e._v(" and "),a("code",[e._v("send()")]),e._v("\nmethods to initiate the HTTPS request.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("httpClient.open('GET', 'https://example.com');\nhttpClient.send();\n")])])]),a("p",[e._v("If the authentication fails, a security exception is thrown. The HTTP client's "),a("code",[e._v("onerror")]),e._v("\ncallback will be passed an error object with the "),a("code",[e._v("code")]),e._v(" key set to "),a("code",[e._v("-1")]),e._v(" and the "),a("code",[e._v("message")]),e._v(" key\nset to the following message:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("Certificate could not be verified with provided public key\n")])])]),a("p",[e._v("To perform another HTTPS request, you need to create another "),a("code",[e._v("HTTPClient")]),e._v(" object and follow the\nsame procedure to initiate an HTTPS request.  You can reuse the same security manager object.")]),e._v(" "),a("h2",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),a("h3",{attrs:{id:"simple-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simple-example"}},[e._v("#")]),e._v(" Simple Example")]),e._v(" "),a("p",[e._v("This example pins two URLs.")]),e._v(" "),a("p",[e._v("The first URL, https://dashboard.appcelerator.com, is pinned to the\npublic key in the X.509 certificate, named "),a("code",[e._v("appcelerator.com.pem")]),e._v(", located in the\napplication's "),a("code",[e._v("Resources")]),e._v(" directory (Classic) or "),a("code",[e._v("app/assets/")]),e._v(" directory (Alloy).")]),e._v(" "),a("p",[e._v("The second URL, https://www.wellsfargo.com, is pinned to the public\nkey in the X.509 certificate, named "),a("code",[e._v("wellsfargo.der")]),e._v(", located the application's\n"),a("code",[e._v("Resources")]),e._v(" directory (Classic) or "),a("code",[e._v("app/assets/")]),e._v(" directory (Alloy).")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("// Require in the module\nvar https = require('appcelerator.https'),\n    securityManager,\n    httpClient;\n\n// Use the module to create a Security Manager that authenticates the specified URLs\nsecurityManager = https.createX509CertificatePinningSecurityManager([\n    {\n        url: 'https://dashboard.appcelerator.com',\n        serverCertificate: 'dashboard.appcelerator.com.der'\n    },\n    {\n        url: 'https://www.wellsfargo.com',\n        serverCertificate: 'wellsfargo.der'\n    }\n]);\n\n// Create an HTTP client the same way you always have\n// but pass in the optional Security Manager that was created previously.\nhttpClient = Ti.Network.createHTTPClient({\n    onload: function(e) {\n        Ti.API.info('Received text: ' + httpClient.responseText);\n    },\n    onerror: function(e) {\n        Ti.API.error(e.error);\n    },\n    timeout: 5000,\n    // Set this property before calling the `open` method. \n    securityManager: securityManager\n});\n\n// Prepare the HTTPS connection in the same way you always have\n// and the Security Manager will authenticate all servers for\n// which it was configured before any communication happens.\nhttpClient.open('GET', 'https://dashboard.appcelerator.com');\n\n// Send the request in the same way you always have.\n// Throws a Security Exception if authentication fails.\nhttpClient.send();\n")])])]),a("ApiDocs")],1)}),[],!1,null,null,null);t.default=i.exports}}]);